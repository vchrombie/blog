{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-cd-with-gha-index-mdx-58c8de5ba1ddc3f36908.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./content/posts/cd-with-gha/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This post would talk discuss how we have set up the Continuous Delivery system using GitHub Actions. This is a continuation post of \", React.createElement(_components.a, {\n    href: \"https://vchrombie.github.io/blog/ci-with-gha\"\n  }, \"Continuous Integration with GitHub Actions\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Continuous delivery (CD) is an approach to software engineering based on producing software in short cycles. We want to generate the GrimoireLab releases very frequently but updating all the PyPI images manually is a big task. We wanted to use GitHub Actions to do this job. Whenever a new tag is produced, the project has to be built and published to PyPI.\"), \"\\n\", React.createElement(_components.p, null, \"We were planning to migrate to using Poetry for managing the GrimoireLab project for a long time. \", React.createElement(_components.a, {\n    href: \"https://github.com/python-poetry/poetry\"\n  }, \"Poetry\"), \" is a tool to handle dependency installation as well as building and packaging Python packages. It makes the tasks simple so, we worked on adding the support for Poetry to all the GrimoireLab tools.\"), \"\\n\", React.createElement(_components.p, null, \"We need to install \", React.createElement(_components.a, {\n    href: \"https://python-poetry.org/docs/#installation\"\n  }, \"Poetry\"), \", and later we can use the below commands to convert any project to a poetry-based project.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"poetry init\"), \" would initialize a project, you are expected to fill the required fields, and later generates the \", React.createElement(_components.em, null, \"pyproject.toml\"), \" file. \", React.createElement(_components.code, null, \"poetry add package_name\"), \" would add the \", React.createElement(_components.em, null, \"package_name\"), \" as the main dependency, whereas \", React.createElement(_components.code, null, \"poetry add -D package_name\"), \" would add the \", React.createElement(_components.em, null, \"package_name\"), \" as a developer dependency.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ poetry init\\n$ poetry add `cat requirements.txt`\\n$ poetry add -D `cat requirements_tests.txt`\\n\")), \"\\n\", React.createElement(_components.p, null, \"You can add additional fields which might be needed according to the project like classifiers, packages, license in the \", React.createElement(_components.em, null, \"pyproject.toml\"), \" file. You can find the whole list in the documentation, \", React.createElement(_components.a, {\n    href: \"https://python-poetry.org/docs/pyproject/\"\n  }, \"The pyproject.toml file\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Once the pyproject.toml is configured correctly, you can install the project using \", React.createElement(_components.code, null, \"poetry install\"), \". This would create a virtual environment and it can be activated using \", React.createElement(_components.code, null, \"poetry shell\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ poetry install\\n$ poetry shell\\n\")), \"\\n\", React.createElement(_components.p, null, \"We can build the package using \", React.createElement(_components.code, null, \"poetry build\"), \", this would create the wheel and tar packages in the \", React.createElement(_components.code, null, \"dist\"), \" folder. Later, we can use \", React.createElement(_components.code, null, \"poetry publish\"), \" to publish these wheel packages to PyPI directly. Make sure you have configured the PyPI token accordingly.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ poetry build\\n$ poetry publish\\n\")), \"\\n\", React.createElement(_components.p, null, \"Now that we have the required setup and the steps, it is quite easy to create a github actions for publising the packages to PyPI. We created the below github action for the same purpose.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"jobs:\\n\\n  build:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Set up Python\\n        uses: actions/setup-python@v2\\n        with:\\n          python-version: '3.x'\\n      - name: Install poetry\\n        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\\n      - name: Build distributions\\n        run: poetry build\\n      - name: Upload distribution artifacts\\n        uses: actions/upload-artifact@v2\\n        with:\\n          name: rt-dist\\n          path: dist\\n\\n  publish:\\n    needs: [build]\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Download distribution artifact\\n        uses: actions/download-artifact@v2\\n        with:\\n          name: rt-dist\\n          path: dist\\n      - name: Set up Python\\n        uses: actions/setup-python@v2\\n        with:\\n          python-version: '3.x'\\n      - name: Install poetry\\n        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python\\n      - name: Configure pypi credentials\\n        env:\\n          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}\\n        run: poetry config http-basic.pypi __token__ \\\"$PYPI_API_TOKEN\\\"\\n      - name: Publish release to pypi\\n        run: poetry publish\\n\")), \"\\n\", React.createElement(_components.p, null, \"The action needs to be triggered whenever a release is made. A release tag (eg. 0.1.12) is generated and pushed to the repository whenever the maintainer publishes a release. This can be added as a rule in the github actions.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"on:\\n  push:\\n    tags: \\n      - '*.*.*'\\n\")), \"\\n\", React.createElement(_components.p, null, \"We have tested this on a couple of repositories and it worked like a charm. We have some plans to expand this to create a full automatic release workflow system to manage and create releases. I will come up with another blog post soon about it.\"), \"\\n\", React.createElement(_components.p, null, \"~ Venu\\n👋\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/p0tt3r/dev/vchrombie/blog/content/posts/cd-with-gha/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","p","code","em","pre","_provideComponents","components","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}