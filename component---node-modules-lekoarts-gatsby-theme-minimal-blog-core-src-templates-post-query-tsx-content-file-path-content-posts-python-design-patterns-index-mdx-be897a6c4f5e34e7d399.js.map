{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-python-design-patterns-index-mdx-be897a6c4f5e34e7d399.js","mappings":"kNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+WAAgX,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,4BAA6B,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gNAAiN,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC52BI,UAAW,mBACV,8kCAA2lC,KAAMD,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,4BAA6B,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,wMAAyM,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACx/CI,UAAW,mBACV,w6CAAi7C,KAAMD,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,0BAA2B,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iMAAkM,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CACr0DI,UAAW,mBACV,g/BAA4/B,KAAMD,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,wBAAyB,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,iRAAkR,KAAMM,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC99CI,UAAW,mBACV,ihBAAshB,KAAMD,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,cAAe,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,kMACzoB,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCnBe,SAASc,EAAiBd,GACvC,OAAOU,EAAAA,cAAoBK,EAAAA,EAAef,EAAOU,EAAAA,cAAoBM,EAAqBhB,GAC5F,CAHAe,EAAAA,C","sources":["webpack://minimal-blog/./content/posts/python-design-patterns/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Design patterns are reusable solutions to common problems in software design. They are like blueprints that you can customize to solve particular design problems in your code. In this blog post, we'll cover some of the most common design patterns in Python: Singleton, Composite, Factory, and Proxy. Let's dive into each one with simple explanations and examples.\"), \"\\n\", React.createElement(_components.h2, null, \"Singleton Design Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The Singleton Design Pattern ensures that a class has only one instance and provides a global point of access to it. This is useful when exactly one object is needed to coordinate actions across a system.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from abc import ABC, abstractmethod\\n\\n\\nclass IPerson(ABC):\\n    @abstractmethod\\n    def person_type(self):\\n        # Interface method\\n        pass\\n\\n\\nclass Person(IPerson):\\n\\n    __instance = None\\n\\n    def get_instance():\\n        if Person.__instance is None:\\n            Person(\\\"Default\\\", 0)\\n        return Person.__instance\\n\\n    def __init__(self, name, age):\\n        if Person.__instance is not None:\\n            raise Exception(\\\"This class is a singleton!\\\")\\n        else:\\n            self.name = name\\n            self.age = age\\n            Person.__instance = self\\n\\n    @staticmethod\\n    def person_type():\\n        print(f\\\"Person Name: {Person.__instance.name}\\\")\\n        print(f\\\"Person Age: {Person.__instance.age}\\\")\\n\\n\\np1 = Person(\\\"John\\\", 25)\\nprint(p1)\\np1.person_type()\\n# <__main__.Person object at 0x100eb5ca0>\\n# Person Name: John\\n# Person Age: 25\\n\\np3 = Person.get_instance()\\nprint(p3)\\np3.person_type()\\n# <__main__.Person object at 0x100eb5ca0>\\n# Person Name: John\\n# Person Age: 25\\n\\np2 = Person(\\\"Jack\\\", 30)\\n# Exception: This class is a singleton!\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Composite Design Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The Composite Design Pattern allows you to compose objects into tree structures to represent part-whole hierarchies. It lets clients treat individual objects and compositions of objects uniformly.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from abc import ABC, abstractmethod, abstractstaticmethod\\n\\n\\nclass IDepartment(ABC):\\n    @abstractmethod\\n    def __init__(self, employees):\\n        # Interface method\\n        pass\\n\\n    @abstractstaticmethod\\n    def get_name():\\n        # Interface method\\n        pass\\n\\n\\nclass Accounting(IDepartment):\\n    def __init__(self, employees):\\n        self.employees = employees\\n\\n    def get_name(self):\\n        print(\\\"Accounting {}\\\".format(self.employees))\\n\\n\\nclass Development(IDepartment):\\n    def __init__(self, employees):\\n        self.employees = employees\\n\\n    def get_name(self):\\n        print(\\\"Development {}\\\".format(self.employees))\\n\\n\\nclass ParentDepartment(IDepartment):\\n    def __init__(self, employees):\\n        self.employees = employees\\n        self.base_employees = employees\\n        self.departments = []\\n\\n    def add_department(self, department):\\n        self.departments.append(department)\\n        self.employees += department.employees\\n\\n    def get_name(self):\\n        print(\\\"Parent Department {}\\\".format(self.base_employees))\\n        for department in self.departments:\\n            department.get_name()\\n        print(\\\"Total Employees {}\\\".format(self.employees))\\n\\n\\nd1 = Accounting(200)\\nd2 = Development(300)\\nd3 = ParentDepartment(50)\\nd3.add_department(d1)\\nd3.add_department(d2)\\n\\nd3.get_name()\\n# Parent Department 50\\n# Accounting 200\\n# Development 300\\n# Total Employees: 550\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Factory Design Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from abc import ABC, abstractmethod\\n\\n\\nclass IPerson(ABC):\\n    @abstractmethod\\n    def person_type(self):\\n        # Interface method\\n        pass\\n\\n\\n# p = IPerson()\\n# TypeError: Can't instantiate abstract class IPerson\\n# with abstract method person_type\\n\\nclass Teacher(IPerson):\\n    def person_type(self):\\n        return \\\"Teacher\\\"\\n\\n\\nclass Student(IPerson):\\n    def person_type(self):\\n        return \\\"Student\\\"\\n\\n\\nt = Teacher()\\nprint(t.person_type())  # Teacher\\n\\ns = Student()\\nprint(s.person_type())  # Student\\n\\n\\nclass PersonFactory:\\n\\n    @staticmethod\\n    def get_person(person_type):\\n        if person_type == \\\"Teacher\\\":\\n            return Teacher()\\n        if person_type == \\\"Student\\\":\\n            return Student()\\n        raise TypeError(\\\"Invalid person type\\\")\\n\\n\\nperson_type = input(\\\"Enter person type (Teacher/Student): \\\")\\ntry:\\n    person = PersonFactory.get_person(person_type)\\nexcept TypeError as e:\\n    print(e)\\nelse:\\n    print(person.person_type())\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Proxy Design Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The Proxy Design Pattern provides a surrogate or placeholder for another object to control access to it. The proxy object acts as an intermediary between the client and the real object, performing various tasks such as lazy initialization, access control, logging, etc.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from abc import ABC, abstractmethod\\n\\n\\nclass IPerson(ABC):\\n    @abstractmethod\\n    def person_type(self):\\n        # Interface method\\n        pass\\n\\n\\nclass Person(IPerson):\\n    def person_type(self):\\n        return \\\"Person\\\"\\n\\n\\nclass ProxyPerson(IPerson):\\n    def __init__(self):\\n        self.person = Person()\\n\\n    def person_type(self):\\n        return \\\"Proxy \\\" + self.person.person_type()\\n\\n\\np1 = Person()\\nprint(p1.person_type())\\n# Person\\n\\np2 = ProxyPerson()\\nprint(p2.person_type())\\n# Proxy Person\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"These design patterns provide a solid foundation for solving common design problems. By understanding and using these patterns, you can create more flexible, reusable, and maintainable code.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/p0tt3r/dev/vchrombie/blog/content/posts/python-design-patterns/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}