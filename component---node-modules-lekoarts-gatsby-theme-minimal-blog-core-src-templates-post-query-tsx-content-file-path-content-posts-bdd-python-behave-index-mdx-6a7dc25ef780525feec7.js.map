{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-bdd-python-behave-index-mdx-6a7dc25ef780525feec7.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./content/posts/bdd-python-behave/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h3, null, \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Behavior Driven Development (BDD) is an agile software development technique that mainly encourages collaboration between developers, non-technical or business participants in a software project. In short, both technical and non-technical individuals have a role to play towards the overall project. It has tests developed in plain text with the implementation logic in Python.\"), \"\\n\", React.createElement(_components.p, null, \"By the end of this tutorial, you should be able to write basic behavioral tests using \", React.createElement(_components.a, {\n    href: \"https://github.com/behave/behave\"\n  }, \"Behave\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Prerequisites\"), \"\\n\", React.createElement(_components.p, null, \"Before starting, please make sure you have installed the following:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.python.org/downloads/\"\n  }, \"Python 3.x\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://pypi.org/project/behave/\"\n  }, \"Behave\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Setting Up Your Environment\"), \"\\n\", React.createElement(_components.p, null, \"This tutorial will walk you through writing tests for and coding a feature of a Simple Calculator. To get started, create a root directory where your code will go, and then create the following directories and blank files:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ tree\\n.\\n|____features\\n| |____calculator.feature\\n| |____steps\\n|   |____steps.py\\n|____calculator.py\\n\")), \"\\n\", React.createElement(_components.p, null, \"Here’s a brief explanation of the files:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"calculator.feature\"), \": The written out tests for the calculator.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"steps.py\"), \": The code that runs the tests in calculator.feature.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"calculator.py\"), \": The implementation code for the calculator.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Writing Your First Test\"), \"\\n\", React.createElement(_components.p, null, \"Behavioral tests are much similar to TDD methodology. We will start with the tests first.\"), \"\\n\", React.createElement(_components.h4, null, \"Writing the Scenario\"), \"\\n\", React.createElement(_components.p, null, \"Open \", React.createElement(_components.code, null, \"calculator.feature\"), \" and add the following first line:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-feature\"\n  }, \"Feature: Test Calculator Functionality\\n\")), \"\\n\", React.createElement(_components.p, null, \"This line describes the features of the application. For our project, Calculator, we might not have many features but in large scale application we would have many features. Next, we will add a test. The first test would be very simple - \", React.createElement(_components.em, null, \"Add two numbers\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-feature\"\n  }, \"Feature: Test Calculator Functionality\\n  Scenario: Add two numbers\\n\")), \"\\n\", React.createElement(_components.p, null, \"Before we write more, we need to understand the three phases of a basic Behave test: \", React.createElement(_components.code, null, \"Given\"), \", \", React.createElement(_components.code, null, \"When\"), \", and \", React.createElement(_components.code, null, \"Then\"), \".\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Given\"), \" initializes a state, \", React.createElement(_components.strong, null, \"When\"), \" describes an action, and \", React.createElement(_components.strong, null, \"Then\"), \" states the expected outcome. For this test, our state is having the two numbers, the action is adding them, and the expected outcome is that expecting the result to be sum of the two numbers. Here’s how this is translated into a Behave test:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-feature\"\n  }, \"Feature: Test Calculator Functionality=\\n  Scenario: Addition\\n      Given I have the numbers 10 and 5\\n      When I add them\\n      Then I expect the result to be 15\\n\")), \"\\n\", React.createElement(_components.p, null, \"Notice that the three phases read like a normal English sentence. You should strive for this when writing behavioral tests because they are easily readable by anyone working in the code base (need not be a developer).\"), \"\\n\", React.createElement(_components.p, null, \"Now to see how Behave works, simply open a terminal in the root directory of your code and run the \", React.createElement(_components.code, null, \"behave\"), \" command and you should see the output.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ behave\\nFeature: Test Calculator Functionality # features/calculator.feature:2\\n\\n  Scenario: Addition                  # features/calculator.feature:4\\n    Given I have the numbers 10 and 5 # None\\n    When I add them                   # None\\n    Then I expect the result to be 15 # None\\n\\n\\nFailing scenarios:\\n  features/calculator.feature:4  Addition\\n\\n0 features passed, 1 failed, 0 skipped\\n0 scenarios passed, 1 failed, 0 skipped\\n0 steps passed, 0 failed, 0 skipped, 3 undefined\\nTook 0m0.000s\\n\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"The key part here is that we have one failing scenario (and therefore a failing feature) that we need to fix. Below that, Behave suggests how to implement steps. You can think of a step as a task for Behave to execute. Each phase (“given”, “when”, and “then”) are all implemented as steps.\"), \"\\n\", React.createElement(_components.h4, null, \"Writing the Steps\"), \"\\n\", React.createElement(_components.p, null, \"The steps that Behave runs are written in Python and they are the link between the descriptive tests in \", React.createElement(_components.code, null, \".feature\"), \" files and the actual application code. Go ahead and open \", React.createElement(_components.code, null, \"steps.py\"), \" and add the following imports:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"from behave import given, when, then\\nfrom calculator import Calculator\\n\")), \"\\n\", React.createElement(_components.p, null, \"Behave steps use annotations that match the names of the phases. This is the first step as described in the scenario:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@given(u'I have the numbers {num1} and {num2}')\\ndef step_impl(context, num1, num2):\\n    print(u'STEP: Given I have the numbers {} and {}'.format(num1, num2))\\n    context.num1 = int(num1)\\n    context.num2 = int(num2)\\n\")), \"\\n\", React.createElement(_components.p, null, \"It’s important to notice that the text inside of the annotation matches the scenario text exactly. If it doesn’t match, the test cannot run.\"), \"\\n\", React.createElement(_components.p, null, \"The context object is passed from step to step, and it is where we can store information to be used by other steps. Since this step is a “given”, we need to initialize our state. We do that by storing our numbers in \", React.createElement(_components.code, null, \"num1\"), \" & \", React.createElement(_components.code, null, \"num2\"), \" variables and attaching them to the context. If you run behave again, you’ll see the test fails, because the “when” and “then” steps are not implemented. You can run behave command after each step to see how the tests are working.\"), \"\\n\", React.createElement(_components.p, null, \"Here are the next steps to add to \", React.createElement(_components.code, null, \"steps.py\"), \":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@when(u'I add them')\\ndef step_impl(context, opr):\\n    print(u'STEP: When I add them')\\n    context.result = Calculator().add(\\n        context.num1,\\n        context.num2\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, \"Again, the annotation text matches the text in the scenario exactly. In the “when” step, we have access to the two numbers using context and we call the Calculator class to call the add method with the numbers.\"), \"\\n\", React.createElement(_components.p, null, \"Finally, in the “then” step, we still have access to the numbers and their sum, and we assert that the result is equal to the expected sum.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@then(u'I expect the result to be {result}')\\ndef step_impl(context, result):\\n    print(u'STEP: Then I expect the result to be {}'.format(result))\\n    assert context.result == int(result),\\n    'Expected {}, got {}'.format(result, context.result)\\n\")), \"\\n\", React.createElement(_components.p, null, \"We are done with the tests now, let's switch to \", React.createElement(_components.code, null, \"calculator.py\"), \" and define the add method:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"#!/usr/bin/env python3\\n\\nclass Calculator:\\n    def __init__(self, caching=True):\\n        \\\"\\\"\\\" init \\\"\\\"\\\"\\n        pass\\n\\n    def add(self, xxx, yyy):\\n        \\\"\\\"\\\" addition \\\"\\\"\\\"\\n        return xxx + yyy\\n\")), \"\\n\", React.createElement(_components.p, null, \"Everything looks good, let's go ahead and run the behave command again and you should see that the test passes:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"$ behave\\nFeature: Test Calculator Functionality # features/calculator.feature:2\\n\\n  Scenario: Addition                  # features/calculator.feature:4\\n    Given I have the numbers 10 and 5 # features/steps/steps.py:5 0.000s\\n    When I add them                   # features/steps/steps.py:12 0.000s\\n    Then I expect the result to be 15 # features/steps/steps.py:21 0.000s\\n\\n1 feature passed, 0 failed, 0 skipped\\n1 scenario passed, 0 failed, 0 skipped\\n3 steps passed, 0 failed, 0 skipped, 0 undefined\\nTook 0m0.001s\\n\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Extending the Calculator\"), \"\\n\", React.createElement(_components.p, null, \"Now that we have addition, let's add multiplication too.\"), \"\\n\", React.createElement(_components.p, null, \"As mentioned above, we will add the tests first in \", React.createElement(_components.code, null, \"calculator.feature\"), \" file:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-feature\"\n  }, \"  Scenario: Multiplication\\n      Given I have the numbers 10 and 5\\n      When I mult them\\n      Then I expect the result to be 50\\n\")), \"\\n\", React.createElement(_components.p, null, \"Next, we are add the implementation in the \", React.createElement(_components.code, null, \"steps.py\"), \". Also, see that the \", React.createElement(_components.code, null, \"Given\"), \" and \", React.createElement(_components.code, null, \"Then\"), \" looks similar to that of the Addition scenario, so we don't need to define them again.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@when(u'I mult them')\\ndef step_impl(context, opr):\\n    print(u'STEP: When I mult them')\\n    context.result = Calculator().mult(\\n        context.num1,\\n        context.num2\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, \"And lastly, implement the \", React.createElement(_components.code, null, \"mult\"), \" method in the \", React.createElement(_components.code, null, \"calculator.py\"), \" file:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"#!/usr/bin/env python3\\n\\nclass Calculator:\\n    ...\\n\\n    def mult(self, xxx, yyy):\\n        \\\"\\\"\\\" multiply \\\"\\\"\\\"\\n        return xxx * yyy\\n\")), \"\\n\", React.createElement(_components.p, null, \"When you run the behave command again, you can see that all the tests pass (1 Feature, 2 Scenarios and 6 Steps).\"), \"\\n\", React.createElement(_components.h3, null, \"Optimizing the tests and code\"), \"\\n\", React.createElement(_components.p, null, \"You can see that the steps implementation have a lot in common. So, we can try to optimize it by parsing the arithmetic operation also as a variable in the \", React.createElement(_components.code, null, \"steps.py\"), \":\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@when(u'I {opr} them')\\ndef step_impl(context, opr):\\n    print(u'STEP: When I add them')\\n    context.result = Calculator().operator(\\n        opr,\\n        context.num1,\\n        context.num2\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, \"and the \", React.createElement(_components.code, null, \"calculator.py\"), \" should look something like:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"class Calculator(object):\\n    def __init__(self, caching=True):\\n        \\\"\\\"\\\" init \\\"\\\"\\\"\\n        pass\\n\\n    def add(self, xxx, yyy):\\n        \\\"\\\"\\\" addition \\\"\\\"\\\"\\n        return xxx + yyy\\n\\n    def mult(self, xxx, yyy):\\n        \\\"\\\"\\\" multiply \\\"\\\"\\\"\\n        return xxx * yyy\\n\\n    def operator(self, opr, xxx, yyy):\\n        if opr == 'add':\\n            return self.add(xxx, yyy)\\n        elif opr == 'mult':\\n            return self.mult(xxx, yyy)\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Environmental Controls\"), \"\\n\", React.createElement(_components.p, null, \"Similar to \", React.createElement(_components.code, null, \"setUp\"), \" and \", React.createElement(_components.code, null, \"tearDown\"), \" in unit tests, the \", React.createElement(_components.a, {\n    href: \"https://behave.readthedocs.io/en/stable/tutorial.html#environmental-controls\"\n  }, React.createElement(_components.code, null, \"environment.py\"), \" module\"), \" can define code to run before and after certain events during your testing. We can use this to initialize the Calculator class since we need it in every scenario.\"), \"\\n\", React.createElement(_components.p, null, \"Create \", React.createElement(_components.code, null, \"environment.py\"), \" file in the \", React.createElement(_components.code, null, \"features/\"), \" folder and add the following code:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"from calculator import Calculator\\n\\n\\ndef before_all(context):\\n    context.calculator = Calculator()\\n\\n\\ndef after_all(context):\\n    del context.calculator\\n\")), \"\\n\", React.createElement(_components.p, null, \"This would initialize the Calculator before everything and stores it in the context so that we can use it in any step. With this, we can change the code in \", React.createElement(_components.code, null, \"steps.py\"), \" as:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-py\"\n  }, \"@when(u'I {opr} them')\\ndef step_impl(context, opr):\\n    print(u'STEP: When I add them')\\n    context.result = context.calculator.operator(\\n        opr,\\n        context.num1,\\n        context.num2\\n    )\\n\")), \"\\n\", React.createElement(_components.h3, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"This tutorial walked you through setting up a new project with the Behave library and using test-driven development to build a calculator based off of behavioral tests.\"), \"\\n\", React.createElement(_components.p, null, \"If you would like to get experience writing more tests with this project, try implementing the division, modulus and other arithmetic and advanced operations.\"), \"\\n\", React.createElement(_components.h3, null, \"Resources\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"You can find the full source code of the implementation: \", React.createElement(_components.a, {\n    href: \"https://github.com/vchrombie/bdd-testing-behave\"\n  }, \"vchrombie/bdd-testing-behave\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://behave.readthedocs.io/en/stable/tutorial.html\"\n  }, \"Tutorial — behave 1.2.6 documentation\")), \"\\n\", React.createElement(_components.li, null, \"BDD Quickstart with Python: \", React.createElement(_components.a, {\n    href: \"https://blog.visionify.ai/bdd-quickstart-with-python-4cf366cfc11c\"\n  }, \"https://blog.visionify.ai/bdd-quickstart-with-python-4cf366cfc11c\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Have a comment? You can drop it below.\"), \"\\n\", React.createElement(_components.p, null, \"adios 👋\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/p0tt3r/dev/vchrombie/blog/content/posts/bdd-python-behave/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","h3","p","ul","li","pre","code","h4","em","strong","_provideComponents","components","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}